	.file	"tsynch.c"
	.text
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC0:
	.string	"Values for even and odd are %ld and %ld, respectively\n"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC1:
	.string	"result = %ld\n"
	.section	.rodata.str1.8
	.align 8
.LC2:
	.string	"To double check ... result = %ld\n"
	.text
	.type	foo._omp_fn.0, @function
foo._omp_fn.0:
.LFB10:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	$0, %ebx
	jmp	.L2
.L12:
	call	GOMP_barrier
	movq	result_odd(%rip), %rdx
	movq	result_even(%rip), %rsi
	movl	$.LC0, %edi
	movl	$0, %eax
	call	printf
	call	GOMP_critical_start
	movq	result_odd(%rip), %rax
	addq	result_even(%rip), %rax
	addq	%rax, result(%rip)
	call	GOMP_critical_end
	lock addq	$1, result(%rip)
	mfence
	call	GOMP_barrier
	movq	result(%rip), %rsi
	movl	$.LC1, %edi
	movl	$0, %eax
	call	printf
	call	GOMP_barrier
	movq	result(%rip), %rsi
	movl	$.LC2, %edi
	movl	$0, %eax
	call	printf
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
.L3:
	.cfi_restore_state
	movl	$.gomp_critical_user_even, %edi
	call	GOMP_critical_name_start
	addq	$1, result_even(%rip)
	movl	$.gomp_critical_user_even, %edi
	call	GOMP_critical_name_end
.L6:
	addq	$1, %rbx
	cmpq	$5, %rbx
	je	.L12
.L2:
	testb	$1, %bl
	jne	.L3
	movl	$.gomp_critical_user_odd, %edi
	call	GOMP_critical_name_start
	addq	$1, result_odd(%rip)
	movl	$.gomp_critical_user_odd, %edi
	call	GOMP_critical_name_end
	jmp	.L6
	.cfi_endproc
.LFE10:
	.size	foo._omp_fn.0, .-foo._omp_fn.0
	.globl	foo
	.type	foo, @function
foo:
.LFB8:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$0, %ecx
	movl	$0, %edx
	movl	$0, %esi
	movl	$foo._omp_fn.0, %edi
	call	GOMP_parallel
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE8:
	.size	foo, .-foo
	.globl	main
	.type	main, @function
main:
.LFB9:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$0, %eax
	call	foo
	movl	$0, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE9:
	.size	main, .-main
	.comm	.gomp_critical_user_odd,8,8
	.comm	.gomp_critical_user_even,8,8
	.globl	result_odd
	.bss
	.align 8
	.type	result_odd, @object
	.size	result_odd, 8
result_odd:
	.zero	8
	.globl	result_even
	.align 8
	.type	result_even, @object
	.size	result_even, 8
result_even:
	.zero	8
	.globl	result
	.align 8
	.type	result, @object
	.size	result, 8
result:
	.zero	8
	.ident	"GCC: (GNU) 7.3.0"
	.section	.note.GNU-stack,"",@progbits
